<Window x:Class="UsingMoreBrushes.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:UsingMoreBrushes.ViewModels"
        xmlns:converters="clr-namespace:UsingMoreBrushes.Converters"
        xmlns:local="clr-namespace:UsingMoreBrushes"
        mc:Ignorable="d"
        Title="Using Brushes" Height="475" Width="800" MinHeight="350" MinWidth="550" 
		d:DataContext="{d:DesignInstance {x:Type viewModels:MainWindowViewModel}, IsDesignTimeCreatable=True}">


    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BoolealToVisibilityConverter"/>
        <converters:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter"/>

        <!--<DataTemplate x:Key="SelectColourComboBoxDataTemplate" DataType="viewModels:SolidBrushViewModel.ColoursCollection">-->
        <DataTemplate x:Key="SelectColourComboBoxDataTemplate" DataType="viewModels:MainWindowViewModel.ColoursCollection">
            <StackPanel Height="Auto" Width="Auto" Orientation="Vertical">
                <!-- 
                    This displays the color directly if you simply use an IEnumberable<PropertyInfo> as the ItemSource
                    for the combobox.  The sample code is in the MainWindowViewModel.  The commented lines below reference
                    the correct property to display the color square and the name of the color within the combobox.
                                        
                    However, to be able to use the ColourInfo class, as defined in the Blend XAML UI course, which is 
                    populated in exactly the same Reflection based way, a converted is needed between the Color stored
                    and the brush needed by the Fill property.  There isn't a standard converted, so a custom
                    converter is used and placed upon the binding for the rectangle.  Works exactly as the less cody
                    method but demonstrates the control needed to work with the base types and improves understanding 
                    of how this stuff hangs together, the XAML binding and the use of colours and brushes.
                -->
                <!--<Rectangle Height="16" Width="16" Fill="{Binding Name, Mode=OneWay}" />-->
                <!--<TextBlock Height="Auto" Width="Auto" Text="{Binding Name, Mode=OneWay}"/>-->
                <TextBlock Height="Auto" Width="Auto" Text="{Binding Name, Mode=OneWay}"/>
                <Rectangle Height="5" Width="Auto" Fill="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}, Mode=OneWay}" />
            </StackPanel>
        </DataTemplate>

    </Window.Resources>

    <!-- Width=350, Height=550 -->

    <Window.DataContext>
        <!-- 
            See note on DataManager method "GetShapeNames" which avoids the DataContext throwing
            an exception.  The d:DesignInstance line also produces the same error.    
        -->
        <viewModels:MainWindowViewModel />
    </Window.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" MinWidth="300"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Viewbox Grid.Row="0" Grid.Column="0"
			Width="Auto" Height="Auto"
			HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Canvas x:Name="ShapeCanvas" Width="280" Height="300"
				HorizontalAlignment="Center" VerticalAlignment="Center">
                <Rectangle x:Name="DemoRectangle" Visibility="{Binding RectangleIsVisible, Converter={StaticResource BoolealToVisibilityConverter}, Mode=OneWay}"
					Width="270" Height="290" 
					HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
					Margin="5" Fill="{Binding SelectedBrush, Mode=OneWay}"/>
                <Ellipse x:Name="DemoEllipse" Visibility="{Binding EllipseIsVisible, Converter={StaticResource BoolealToVisibilityConverter}, Mode=OneWay}"
					Width="270" Height="290"
					HorizontalAlignment="Center" VerticalAlignment="Center"
					Margin="5" Fill="{Binding SelectedBrush, Mode=OneWay}"/>
            </Canvas>
        </Viewbox>

        <GroupBox Grid.Row="0" Grid.Column="1"
			Header="Size and Fill properties"
			BorderThickness="1" BorderBrush="Black"
			Margin="5">
            <StackPanel VerticalAlignment="Top">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="7*"/>
                        <ColumnDefinition Width="9*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Select a Shape to draw -->
                    <TextBlock Grid.Row="0" Grid.Column="0"
						HorizontalAlignment="Right" VerticalAlignment="Center"
						Margin="5"
						Text="Shape"/>
                    <ComboBox Grid.Row="0" Grid.Column="1"
						HorizontalAlignment="Left" VerticalAlignment="Center"
						Margin="5" 
						ItemsSource="{Binding ShapesNames}" 
						SelectedItem="{Binding SelectedShapeName, Mode=TwoWay}"/>

                    <!-- Define the size of the shape -->
                    <TextBlock Grid.Row="1" Grid.Column="0" 
						HorizontalAlignment="Right" VerticalAlignment="Center"
						Margin="5"
						Text="Shape Size"/>
                    <StackPanel Grid.Row="1" Grid.Column="1"
						Orientation="Horizontal" 
						HorizontalAlignment="Left" VerticalAlignment="Center" 
						Margin="5">
                        <TextBlock Text="H: " Margin="5"/>
                        <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
							Width="Auto" MinWidth="20"
							Text="{Binding Height, ElementName=ShapeCanvas}"/>
                        <TextBlock Text="W: " Margin="5"/>
                        <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
							Width="Auto" MinWidth="20"
							Text="{Binding Width, ElementName=ShapeCanvas}"/>
                    </StackPanel>

                    <TextBlock Margin="5" Grid.Row="2" Grid.Column="0" Text="Select Brush" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                    <ComboBox Grid.Row="2" Grid.Column="1"
						HorizontalAlignment="Left" VerticalAlignment="Center"
						Margin="5" ItemsSource="{Binding BrushNames}" 
						SelectedItem="{Binding SelectedBrushName, Mode=TwoWay}"/>
                </Grid>

                <GroupBox x:Name="SolidColorBrushGroupBox" 
					Header="{Binding SolidBrushProperties.Header, Mode=OneWay}"
					Visibility="{Binding IsSolidBrushPropertiesVisible, Converter={StaticResource BoolealToVisibilityConverter}, Mode=OneWay}">
                    <Grid VerticalAlignment="Top">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="7*"/>
                            <ColumnDefinition Width="9*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TextBlock HorizontalAlignment="Right" Text="Select Colour" VerticalAlignment="Center" Margin="5"/>
                        <ComboBox Grid.Column="1" HorizontalAlignment="Left" Margin="5" VerticalAlignment="Center" MinWidth="75"
                                  ItemsSource="{Binding ColoursCollection, Mode=OneWay}" 
                                  SelectedItem="{Binding SolidBrushProperties.SelectedColor, Mode=TwoWay}" 
                                  ItemTemplate="{StaticResource SelectColourComboBoxDataTemplate}"/>
                    </Grid>
                </GroupBox>
                <GroupBox x:Name="LinearGradientBrushGroupBox" 
					Header="{Binding LinearGradientBrushProperties.Header, Mode=OneWay}" 
                    Visibility="{Binding IsLinearGradientBrushPropertiesVisible, Converter={StaticResource BoolealToVisibilityConverter}, Mode=OneWay}">
                    <!--Visibility="Visible">-->
                    <StackPanel>
                        <Grid Height="100" >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*"/>
                                <ColumnDefinition Width="9*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock HorizontalAlignment="Right" TextWrapping="Wrap" VerticalAlignment="Center" Margin="5" Text="Start Point"/>
                            <StackPanel Margin="5" Grid.Column="1" MinWidth="17" Orientation="Horizontal">
                                <TextBlock Text="X: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding LinearGradientBrushProperties.StartPointX, Mode=TwoWay}"/>
                                <TextBlock Text="Y: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding LinearGradientBrushProperties.StartPointY, Mode=TwoWay}"/>
                            </StackPanel>
                            <TextBlock HorizontalAlignment="Right" TextWrapping="Wrap" VerticalAlignment="Center" Margin="5" Text="End Point" Grid.Row="1"/>
                            <StackPanel Margin="5" Grid.Column="1" MinWidth="17" Orientation="Horizontal" Grid.Row="1">
                                <TextBlock Text="X: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding LinearGradientBrushProperties.EndPointX, Mode=TwoWay}"/>
                                <TextBlock Text="Y: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding LinearGradientBrushProperties.EndPointY, Mode=TwoWay}"/>
                            </StackPanel>
                        </Grid>

                        <DataGrid x:Name="LinearGradientStopsDataGrid" 
                                  VerticalAlignment="Top" Margin="5"
                                  AutoGenerateColumns="False"
                                  ItemsSource="{Binding LinearGradientBrushProperties.GradientStops}" 
                                  CanUserAddRows="True"
                                  CanUserDeleteRows="True"
                                  SelectionMode="Single" 
                                  PreparingCellForEdit="GradientStopsDataGrid_PreparingCellForEdit" 
                                  RowEditEnding="GradientStopsDataGrid_RowEditEnding" 
                                  CellEditEnding="GradientStopsDataGrid_CellEditEnding" 
                                  BeginningEdit="GradientStopsDataGrid_BeginningEdit">
                            <!-- 
								  SelectedItem="{Binding LinearGradientBrushProperties.SelectedGradientStop, Mode=TwoWay}" 
								  SelectedIndex="{Binding LinearGradientBrushProperties.SelectedGradientStopIndex, Mode=TwoWay}"
                            -->
                            <DataGrid.Columns>
                                <DataGridTemplateColumn Header="Colour">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Height="Auto" Width="Auto" MinWidth="75"
												HorizontalAlignment="Left" Margin="5">
                                                <TextBlock Height="Auto" Width="Auto" Text="{Binding Colour.Name, Mode=OneWay}"/>
                                                <Rectangle Height="5" Width="Auto"
													Fill="{Binding Colour.Color, Converter={StaticResource ColorToSolidColorBrushConverter}, Mode=OneWay}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                    <DataGridTemplateColumn.CellEditingTemplate>
                                        <DataTemplate>
                                            <ComboBox HorizontalAlignment="Left" Margin="5" VerticalAlignment="Center" MinWidth="75"
                                                      ItemsSource="{Binding DataContext.ColoursCollection, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" 
                                                      SelectedItem="{Binding Colour, Mode=TwoWay}" 
                                                      ItemTemplate="{StaticResource SelectColourComboBoxDataTemplate}">
                                                <!--<ComboBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Height="Auto" Width="Auto" Orientation="Vertical" >
                                                            <TextBlock Height="Auto" Width="Auto" Text="{Binding Name}"/>
                                                            <Rectangle Height="5" Width="Auto" 
                                                                       Fill="{Binding Color, Mode=OneWay, Converter={StaticResource ColorToSolidColorBrushConverter}}"/>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ComboBox.ItemTemplate>-->
                                            </ComboBox>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellEditingTemplate>
                                </DataGridTemplateColumn>

                                <DataGridTextColumn Header="Offset" Binding="{Binding Offset, Mode=TwoWay}"/>

                            </DataGrid.Columns>
                        </DataGrid>
                    </StackPanel>
                </GroupBox >

                <GroupBox x:Name="RadialGradientBrushGroupBox"
                          Header="{Binding RadialGradientBrushProperties.Header, Mode=OneWay}"
                          Visibility="{Binding IsRadialGradientBrushPropertiesVisible, Converter={StaticResource BoolealToVisibilityConverter}, Mode=OneWay}">
                    <!--Visibility="Visible">-->
                    <StackPanel>

                        <Grid Height="130" >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*"/>
                                <ColumnDefinition Width="9*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock HorizontalAlignment="Right" TextWrapping="Wrap" VerticalAlignment="Center" Margin="5" Text="Radius"/>
                            <StackPanel Margin="5" Grid.Column="1" MinWidth="17" Orientation="Horizontal">
                                <TextBlock Text="X: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding RadialGradientBrushProperties.RadiusX, Mode=TwoWay}"/>
                                <TextBlock Text="Y: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding RadialGradientBrushProperties.RadiusY, Mode=TwoWay}"/>
                            </StackPanel>
                            <TextBlock HorizontalAlignment="Right" TextWrapping="Wrap" VerticalAlignment="Center" Margin="5" Text="Centre" Grid.Row="1"/>
                            <StackPanel Margin="5" Grid.Column="1" MinWidth="17" Orientation="Horizontal" Grid.Row="1">
                                <TextBlock Text="X: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding RadialGradientBrushProperties.CentreX, Mode=TwoWay}"/>
                                <TextBlock Text="Y: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding RadialGradientBrushProperties.CentreY, Mode=TwoWay}"/>
                            </StackPanel>
                            <TextBlock HorizontalAlignment="Right" TextWrapping="Wrap" VerticalAlignment="Center" Margin="5" Text="Gradient Origin" Grid.Row="2"/>
                            <StackPanel Margin="5" Grid.Column="1" MinWidth="17" Orientation="Horizontal" Grid.Row="2">
                                <TextBlock Text="X: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding RadialGradientBrushProperties.OriginX, Mode=TwoWay}"/>
                                <TextBlock Text="Y: " Margin="5"/>
                                <TextBox HorizontalAlignment="Left" VerticalAlignment="Center" 
									Width="Auto" MinWidth="20"
									Text="{Binding RadialGradientBrushProperties.OriginY, Mode=TwoWay}"/>
                            </StackPanel>
                        </Grid>

                        <DataGrid x:Name="RadialGradientStopsDataGrid" 
                                  VerticalAlignment="Top" Margin="5"
                                  AutoGenerateColumns="False"
                                  ItemsSource="{Binding RadialGradientBrushProperties.GradientStops}" 
                                  CanUserAddRows="True"
                                  CanUserDeleteRows="True"
                                  SelectionMode="Single" 
                                  PreparingCellForEdit="GradientStopsDataGrid_PreparingCellForEdit">
                            <DataGrid.Columns>
                                <DataGridTemplateColumn Header="Colour">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Height="Auto" Width="Auto" MinWidth="75"
												HorizontalAlignment="Left" Margin="5">
                                                <TextBlock Height="Auto" Width="Auto" Text="{Binding Colour.Name, Mode=OneWay}"/>
                                                <Rectangle Height="5" Width="Auto"
													Fill="{Binding Colour.Color, Converter={StaticResource ColorToSolidColorBrushConverter}, Mode=OneWay}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                    <DataGridTemplateColumn.CellEditingTemplate>
                                        <DataTemplate>
                                            <ComboBox HorizontalAlignment="Left" Margin="5" VerticalAlignment="Center" MinWidth="75"
                                                      ItemsSource="{Binding DataContext.ColoursCollection, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" 
                                                      SelectedItem="{Binding Colour, Mode=TwoWay}" 
                                                      ItemTemplate="{StaticResource SelectColourComboBoxDataTemplate}">
                                            </ComboBox>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellEditingTemplate>
                                </DataGridTemplateColumn>

                                <DataGridTextColumn Header="Offset" Binding="{Binding Offset, Mode=TwoWay}"/>

                            </DataGrid.Columns>
                        </DataGrid>

                    </StackPanel>
                </GroupBox>

            </StackPanel>
        </GroupBox>

    </Grid>
</Window>
